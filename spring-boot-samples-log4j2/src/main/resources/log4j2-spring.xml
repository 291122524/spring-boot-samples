<?xml version="1.0" encoding="UTF-8" ?>
<!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出 monitorInterval
	: Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 注：本配置文件的目标是将不同级别的日志输出到不同文件，最大2MB一个文件，
	文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 -->
<Configuration status="WARN" monitorInterval="600">

    <Properties>
        <!-- 项目名称 -->
        <Property name="PROJECT_NAME">dreamland</Property>
        <!-- 日志文件输出目录 -->
        <Property name="LOG_HOME">../logs/${PROJECT_NAME}</Property>
        <Property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</Property>
        <Property name="LOG_LEVEL_PATTERN">%5p</Property>
        <Property name="LOG_DATEFORMAT_PATTERN">yyyy-MM-dd HH:mm:ss.SSS</Property>
        <Property name="CONSOLE_LOG_PATTERN">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>
        <Property name="FILE_LOG_PATTERN">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.} : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>
    </Properties>

    <Appenders>

        <!-- 优先级从高到低分别是 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL -->
        <!-- 单词解释： Match：匹配 DENY：拒绝 Mismatch：不匹配 ACCEPT：接受 -->
        <!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 -->
        <!--输出日志的格式 %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间 %p : 日志输出格式 %c : logger的名称
            %m : 日志内容，即 logger.info("message") %n : 换行符 %C : Java类名 %L : 日志输出所在行数 %M
            : 日志输出所在方法名 hostName : 本地机器名 hostAddress : 本地ip地址 -->

        <!--这个输出控制台的配置，这里输出除了warn和error级别的信息到System.out -->
        <Console name="console_out_appender" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) . -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${sys:CONSOLE_LOG_PATTERN}" />
        </Console>
        <!-- 这个输出控制台的配置，这里输出error级别的信息到System.err，在eclipse控制台上看到的是红色文字 -->
        <Console name="console_err_appender" target="SYSTEM_ERR">
            <ThresholdFilter level="ERROR" onMatch="ACCEPT"
                             onMismatch="DENY" />
            <PatternLayout pattern="${sys:CONSOLE_LOG_PATTERN}" />
        </Console>


        <!-- TRACE级别日志 ; 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出trace级别的数据到trace.log -->
        <RollingFile name="trace_appender" immediateFlush="true"
                     fileName="${LOG_HOME}/trace.log"
                     filePattern="${LOG_HOME}/trace/trace - %d{yyyy-MM-dd HH}.log.gz">
            <PatternLayout>
                <pattern>${sys:FILE_LOG_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 注意filePattern配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}，最小粒度为秒，则每6秒生成一个文件。 -->
                <!-- modulate指示是否应该调整间隔，使下一次滚动发生在间隔边界上。 例如，如果最小粒度是小时，当前的时间是凌晨3点，间隔是4，那么第一次翻转将发生在凌晨4点，
                    然后下一个会发生在上午8点，中午，下午4点，等等 -->
                <!-- 随机延迟日志文件滚动的最大秒数。默认情况下，这是0表示不延迟。 这个设置在服务器上是有用的，在服务器上，多个应用程序同时被配置为滚动日志文件，这样做可以跨时间传播日志 -->
                <TimeBasedTriggeringPolicy interval="6"
                                           modulate="true" maxRandomDelay="0" />
                <!-- 单个文件大小超过50M的日志会自动存入按filePattern建立的文件夹下面并进行压缩，作为存档 。 KB、MB、GB均可 -->
                <SizeBasedTriggeringPolicy size="5 MB" />

                <!-- 每天24点自动归档日志 -->
                <CronTriggeringPolicy schedule="0 0 0 * * ?" />
            </Policies>
            <!-- 同一文件夹下最多20个文件， 默认为7 -->
            <DefaultRolloverStrategy max="20">
                <!-- 每隔30天自动删除旧日志 -->
                <!-- 访问目录的最大级别。0的值意味着只有启动文件(基本路径本身)被访问，除非安全管理器拒绝。默认值为1，仅表示指定的基本目录中的文件 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*-*.log.gz" />
                    <IfLastModified age="30d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- DEBUG级别日志 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出debug级别的数据到debug.log; -->
        <RollingFile name="debug_appender" immediateFlush="true"
                     fileName="${LOG_HOME}/debug.log"
                     filePattern="${LOG_HOME}/debug/debug - %d{yyyy-MM-dd HH}.log.gz">
            <PatternLayout>
                <pattern>${sys:FILE_LOG_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 注意filePattern配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}，最小粒度为秒，则每6秒生成一个文件。 -->
                <!-- modulate指示是否应该调整间隔，使下一次滚动发生在间隔边界上。 例如，如果最小粒度是小时，当前的时间是凌晨3点，间隔是4，那么第一次翻转将发生在凌晨4点，
                    然后下一个会发生在上午8点，中午，下午4点，等等 -->
                <!-- 随机延迟日志文件滚动的最大秒数。默认情况下，这是0表示不延迟。 这个设置在服务器上是有用的，在服务器上，多个应用程序同时被配置为滚动日志文件，这样做可以跨时间传播日志 -->
                <TimeBasedTriggeringPolicy interval="6"
                                           modulate="true" maxRandomDelay="0" />
                <!-- 单个文件大小超过50M的日志会自动存入按filePattern建立的文件夹下面并进行压缩，作为存档 。 KB、MB、GB均可 -->
                <SizeBasedTriggeringPolicy size="5 MB" />

                <!-- 每天24点自动归档日志 -->
                <CronTriggeringPolicy schedule="0 0 0 * * ?" />
            </Policies>
            <!-- 同一文件夹下最多20个文件， 默认为7 -->
            <DefaultRolloverStrategy max="20">
                <!-- 每隔30天自动删除旧日志 -->
                <!-- 访问目录的最大级别。0的值意味着只有启动文件(基本路径本身)被访问，除非安全管理器拒绝。默认值为1，仅表示指定的基本目录中的文件 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*-*.log.gz" />
                    <IfLastModified age="30d" />
                </Delete>
            </DefaultRolloverStrategy>
            <Filters><!-- 此Filter意思是，只输出debug级别的数据 -->
                <ThresholdFilter level="INFO" onMatch="DENY"
                                 onMismatch="NEUTRAL" />
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT"
                                 onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- INFO级别日志 -->
        <RollingFile name="info_appender" immediateFlush="true"
                     fileName="${LOG_HOME}/info.log"
                     filePattern="${LOG_HOME}/info/info - %d{yyyy-MM-dd HH}.log.gz">
            <PatternLayout>
                <pattern>${sys:FILE_LOG_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 注意filePattern配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}，最小粒度为秒，则每6秒生成一个文件。 -->
                <!-- modulate指示是否应该调整间隔，使下一次滚动发生在间隔边界上。 例如，如果最小粒度是小时，当前的时间是凌晨3点，间隔是4，那么第一次翻转将发生在凌晨4点，
                    然后下一个会发生在上午8点，中午，下午4点，等等 -->
                <!-- 随机延迟日志文件滚动的最大秒数。默认情况下，这是0表示不延迟。 这个设置在服务器上是有用的，在服务器上，多个应用程序同时被配置为滚动日志文件，这样做可以跨时间传播日志 -->
                <TimeBasedTriggeringPolicy interval="6"
                                           modulate="true" maxRandomDelay="0" />
                <!-- 单个文件大小超过50M的日志会自动存入按filePattern建立的文件夹下面并进行压缩，作为存档 。 KB、MB、GB均可 -->
                <SizeBasedTriggeringPolicy size="5 MB" />

                <!-- 每天24点自动归档日志 -->
                <CronTriggeringPolicy schedule="0 0 0 * * ?" />
            </Policies>
            <!-- 同一文件夹下最多20个文件， 默认为7 -->
            <DefaultRolloverStrategy max="20">
                <!-- 每隔30天自动删除旧日志 -->
                <!-- 访问目录的最大级别。0的值意味着只有启动文件(基本路径本身)被访问，除非安全管理器拒绝。默认值为1，仅表示指定的基本目录中的文件 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*-*.log.gz" />
                    <IfLastModified age="30d" />
                </Delete>
            </DefaultRolloverStrategy>
            <Filters>
                <ThresholdFilter level="WARN" onMatch="DENY"
                                 onMismatch="NEUTRAL" />
                <ThresholdFilter level="INFO" onMatch="ACCEPT"
                                 onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- WARN级别日志 -->
        <RollingFile name="warn_appender" immediateFlush="true"
                     fileName="${LOG_HOME}/warn.log"
                     filePattern="${LOG_HOME}/warn/warn - %d{yyyy-MM-dd HH}.log.gz">
            <PatternLayout>
                <pattern>${sys:FILE_LOG_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 注意filePattern配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}，最小粒度为秒，则每6秒生成一个文件。 -->
                <!-- modulate指示是否应该调整间隔，使下一次滚动发生在间隔边界上。 例如，如果最小粒度是小时，当前的时间是凌晨3点，间隔是4，那么第一次翻转将发生在凌晨4点，
                    然后下一个会发生在上午8点，中午，下午4点，等等 -->
                <!-- 随机延迟日志文件滚动的最大秒数。默认情况下，这是0表示不延迟。 这个设置在服务器上是有用的，在服务器上，多个应用程序同时被配置为滚动日志文件，这样做可以跨时间传播日志 -->
                <TimeBasedTriggeringPolicy interval="6"
                                           modulate="true" maxRandomDelay="0" />
                <!-- 单个文件大小超过50M的日志会自动存入按filePattern建立的文件夹下面并进行压缩，作为存档 。 KB、MB、GB均可 -->
                <SizeBasedTriggeringPolicy size="5 MB" />

                <!-- 每天24点自动归档日志 -->
                <CronTriggeringPolicy schedule="0 0 0 * * ?" />
            </Policies>
            <!-- 同一文件夹下最多20个文件， 默认为7 -->
            <DefaultRolloverStrategy max="20">
                <!-- 每隔30天自动删除旧日志 -->
                <!-- 访问目录的最大级别。0的值意味着只有启动文件(基本路径本身)被访问，除非安全管理器拒绝。默认值为1，仅表示指定的基本目录中的文件 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*-*.log.gz" />
                    <IfLastModified age="30d" />
                </Delete>
            </DefaultRolloverStrategy>
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="DENY"
                                 onMismatch="NEUTRAL" />
                <ThresholdFilter level="WARN" onMatch="ACCEPT"
                                 onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- ERROR级别日志 -->
        <RollingFile name="error_appender" immediateFlush="true"
                     fileName="${LOG_HOME}/error.log"
                     filePattern="${LOG_HOME}/error/error - %d{yyyy-MM-dd HH}.log.gz">
            <PatternLayout>
                <pattern>${sys:FILE_LOG_PATTERN}</pattern>
            </PatternLayout>
            <Policies>
                <!-- 注意filePattern配置的文件重命名规则是%d{yyyy-MM-dd HH-mm-ss}，最小粒度为秒，则每6秒生成一个文件。 -->
                <!-- modulate指示是否应该调整间隔，使下一次滚动发生在间隔边界上。 例如，如果最小粒度是小时，当前的时间是凌晨3点，间隔是4，那么第一次翻转将发生在凌晨4点，
                    然后下一个会发生在上午8点，中午，下午4点，等等 -->
                <!-- 随机延迟日志文件滚动的最大秒数。默认情况下，这是0表示不延迟。 这个设置在服务器上是有用的，在服务器上，多个应用程序同时被配置为滚动日志文件，这样做可以跨时间传播日志 -->
                <TimeBasedTriggeringPolicy interval="6"
                                           modulate="true" maxRandomDelay="0" />
                <!-- 单个文件大小超过50M的日志会自动存入按filePattern建立的文件夹下面并进行压缩，作为存档 。 KB、MB、GB均可 -->
                <SizeBasedTriggeringPolicy size="5 MB" />

                <!-- 每天24点自动归档日志 -->
                <CronTriggeringPolicy schedule="0 0 0 * * ?" />
            </Policies>
            <!-- 同一文件夹下最多20个文件， 默认为7 -->
            <DefaultRolloverStrategy max="20">
                <!-- 每隔30天自动删除旧日志 -->
                <!-- 访问目录的最大级别。0的值意味着只有启动文件(基本路径本身)被访问，除非安全管理器拒绝。默认值为1，仅表示指定的基本目录中的文件 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*-*.log.gz" />
                    <IfLastModified age="30d" />
                </Delete>
            </DefaultRolloverStrategy>
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="ACCEPT"
                                 onMismatch="DENY" />
            </Filters>
        </RollingFile>
    </Appenders>

    <Loggers>
        <!-- 配置日志的根节点 -->
        <!-- 定义logger，只有定义了logger并引入了appender，appender才会生效 -->
        <root level="trace">
            <appender-ref ref="console_out_appender" />
            <appender-ref ref="console_err_appender" />
            <appender-ref ref="trace_appender" />
            <appender-ref ref="debug_appender" />
            <appender-ref ref="info_appender" />
            <appender-ref ref="warn_appender" />
            <appender-ref ref="error_appender" />
        </root>

        <!-- 第三方日志输出级别 -->
        <Logger name="org.apache.catalina.startup.DigesterFactory" level="error" />
        <Logger name="org.apache.catalina.util.LifecycleBase" level="error" />
        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn" />
        <logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn" />
        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />
        <Logger name="org.hibernate.validator.internal.util.Version" level="warn" />
        <logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>

    </Loggers>

</Configuration>